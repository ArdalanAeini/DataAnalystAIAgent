Context,Rule,Description
products,exclude_delivery_fees,When querying products always exclude items where products.delivery_service_fees = 1 as these represent delivery fees not actual products
products,livraison_exclusion,The 'Livraison Ã  domicile' entry in products table is a delivery fee (not a product) and should be excluded from product-related queries
products,charge_by_weight,Products with charge_by_weight = 1 will have their final price adjusted based on actual weight
product_stats,revenue_calculation,gross_revenue is not simply qty_sold * defined_retail_price due to dynamic pricing algorithm
product_stats,availability_calculation,availability_percentage is availability_nb_times_was_available divided by availability_nb_checks
orders,delivery_types,"For ww_orders, if it's a home delivery the name represents customer name, if pickup-point it represents pickup-point name"
orders,delivery_delay_calculation,"For calculating delivery delays: 1) First check if revised_delivery_time > scheduled_delivery_time to identify if delivery was rescheduled, 2) Calculate actual delay as (real_delivery_time - scheduled_delivery_time). This helps track both schedule changes and actual delays. you should use orders table for accessing to these columns"
delivery_lateness,mandatory_columns,"For ANY delivery lateness query, you MUST use these exact columns: ww_steps.limit_datetime, ww_steps.completed_datetime for time calculations. NEVER use scheduled_datetime, departed_datetime, or any other timing columns. This is a strict requirement."
delivery_lateness,mandatory_calculation,"For ANY delivery lateness calculation, you MUST use TIMEDIFF(ww_steps.limit_datetime,ww_steps.completed_datetime) for basic lateness and TIME_TO_SEC(TIMEDIFF(ww_steps.limit_datetime,ww_steps.completed_datetime)) for minute comparisons. This is the ONLY acceptable way to calculate lateness."
delivery_lateness,lateness_query_template,"STRICT TEMPLATE (modify ONLY date range and minute threshold): SELECT ww_orders.delivery_date AS 'DELIVERY DATE', IF(ww_orders.order_number>0, 'HD', CASE WHEN drop_instance.type=1 THEN 'PUP' WHEN drop_instance.type=2 THEN 'PICKUP' WHEN drop_instance.type=3 THEN 'EMBASSY' WHEN drop_instance.type IS NULL THEN 'BREAK' END) AS 'DELIVERY TYPE', CASE WHEN ww_steps.status=1 THEN 'DONE' WHEN ww_steps.status=2 THEN 'CANCELED' WHEN ww_steps.status=0 THEN 'INCOMPLETED' END AS 'DELIVERY STATUS', IF(ww_orders.order_number>0, user_home_deliveries.city_name, droppoints.city_name) AS 'DELIVERY ADDRESS', ww_steps.limit_datetime AS 'TIME LIMIT FOR DELIVERY', ww_steps.completed_datetime AS 'REAL DELIVERY TIME', TIMEDIFF(ww_steps.limit_datetime,ww_steps.completed_datetime) AS 'DELIVERY LATENESS', CASE WHEN ww_steps.completed_datetime > ww_steps.limit_datetime AND (ww_orders.order_number > 0) THEN 'YES' WHEN ww_steps.completed_datetime > ww_steps.limit_datetime AND (ww_orders.order_number IS NULL AND drop_instance.type IS NOT NULL) THEN 'YES' ELSE 'NO' END AS 'LATE', TIME_TO_SEC(TIMEDIFF(ww_steps.limit_datetime,ww_steps.completed_datetime)) FROM ww_steps INNER JOIN ww_orders ON (ww_orders.order_id = ww_steps.order_id) LEFT JOIN user_home_deliveries ON (user_home_deliveries.order_id = ww_orders.order_number) LEFT JOIN drop_instance ON (drop_instance.drop_instance_id = ww_orders.drop_instance_id) LEFT JOIN droppoints ON (droppoints.droppoint_id = drop_instance.droppoint_id) WHERE ww_steps.type IN (0,2) GROUP BY ww_steps.step_id ORDER BY ww_orders.delivery_date, ww_steps.order ASC"